# Начнем с простейшей игры - крестики-нолики :)
# Реализуйте определение исхода игры на доске.
# Доска представлена кортежем.
# Крестик - 1, нолик - 0, пустые клетки обозначены None.
# Для визуализации я определил переменные с удобными именами.
# None я здесь именую _ (подчеркивание - валидное имя в Python).

X, O, _ = 1, 0, None

TEST_BOARD = (
    O, X, O,
    X, O, X,
    _, _, X
)

# Возможны четыре исхода, для них я тоже определил именованные константы.
O_WINS, X_WINS, UNDEFINED, DRAW = range(4)

# Первая подзадача и подсказка - реализуйте функцию,
# которая возвращает все возможные комбинации по 3 клетки в ряд:
# горизонтали, вертикали, диагонали. Таким образом эта часть
# задачи сводится к упражнению на слайсинг последовательности.
# Можете также попробовать реализовать как генератор.


def slice3(board):
    """
    Возвращает все возможные комбинации по 3 клетки в ряд:
    горизонтали, вертикали, диагонали.

    >>> from pprint import pprint
    >>> pprint(list(slice3((
    ... O, X, O,
    ... X, O, X,
    ... _, _, X
    ... ))))
    [(0, 1, 0),
     (1, 0, 1),
     (None, None, 1),
     (0, 1, None),
     (1, 0, None),
     (0, 1, 1),
     (0, 0, 1),
     (0, 0, None)]
    """
    lines = []
    all_lines = ((0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6))
    for line in all_lines:
        item = board[line[0]], board[line[1]], board[line[2]]
        lines.append(item)
    return lines


def outcome(board):
    """
    Определение исхода.

    Допущение: доска может содержать только множество корректных состояний,
    которое могут получиться в результате справедливой игры.

    1. Когда на доске перечеркнуты первые 3 клетки - игра завершена.
    В этом случае вы должны определить, кто выиграл, и вернуть
    X_WINS или O_WINS.

    >>> outcome((
    ... X, X, O,
    ... O, X, _,
    ... O, _, X))
    1

    2. Для простоты мы пока предполагаем, что игра всегда доигрывается
    до конца. Пока есть пустые клетки и не перечеркнуты любые 3 -
    исход не определен - UNDEFINED.

    >>> outcome((
    ... X, X, O,
    ... O, O, X,
    ... _, _, X))
    2

    3. Если заполнены все клетки, и нет комбинации из трех смежных,
    выигрыш невозможен ни для кого, присуждаем ничью - DRAW

    >>> outcome((
    ... X, X, O,
    ... O, O, X,
    ... X, X, O))
    3
    """

    win_lines = ((0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6))

    cell = None
    if None in board:
        cell = 'Is empty'

    win = None
    for line in win_lines:
        if board[line[0]] == board[line[1]] == board[line[2]] is not None:
            win = board[line[0]]
    
    if win is not None:
        return win
    elif cell == 'Is empty':
        return 2
    else:
        return 3


if __name__ == "__main__":
    import doctest
    doctest.testmod()
